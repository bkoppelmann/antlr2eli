@p maximum_input_line_length = infinity

@O@<basic.con@>==@{
    grammarSpec
      : DOC_COMMENT* grammarDecl rules
      .

    grammarDecl
      : grammarType grammarIdent ';'
      .
    grammarType
      : ('lexer' 'grammar' / 'parser' 'grammar' / 'grammar')
      .

    DOC_COMMENT
      : doc_comment
      .

    rules
      : ruleSpec*
      .

    ruleSpec
      : DOC_COMMENT* (parserRuleSpec / lexerRuleSpec)
      .

    /*parserRuleSpec
     * : DOC_COMMENT* ruleModifiers? RULE_REF argActionBlock? ruleReturns?
     *   throwsSpec? localsSpec? rulePrequel* COLON ruleBlock SEMI exceptionGroup
     */
    parserRuleSpec
      : ruleIdent ':' ruleBlock ';'
      .

    lexerRuleSpec
      : tokenIdent ':' lexerRuleBlock ';'
      .

    ruleBlock
      : ruleAltList
      .

    lexerRuleBlock
      : lexerAltList
      .

    ruleAltList
      : labeledAlt ('|' labeledAlt)*
      .

    lexerAltList
      : lexerAlt ('|' lexerAlt)*
      .

    labeledAlt
      : alternative ['#' identifier]
      .

    lexerAlt
      : lexerElements
      .

    lexerElements
      : lexerElement+
      .

    lexerAtom
      : characterRange
      / terminal
      / '.'
      .

    alternative
      : element+
      /
      .

    element
      : labeledElement (ebnfSuffix / )
      / atom (ebnfSuffix / )
      / ebnf
      .

    lexerElement
      : labeledLexerElement [ebnfSuffix]
      / lexerAtom [ebnfSuffix]
      / lexerBlock [ebnfSuffix]
      .

    labeledElement
      : identifier ('=' / '+=') (atom / block)
      .

    labeledLexerElement
      : identifier ('=' / '+=') (lexerAtom | lexerBlock)
      .

    lexerBlock
      : '(' lexerAltList ')'
      .

    ebnf
      : block [blockSuffix]
      .

    blockSuffix
      : ebnfSuffix
      .

    ebnfSuffix
      : '?' ['?']
      / '*' ['?']
      / '+' ['?']
      .

    atom
      : terminal
      / ruleref
      .

    characterRange
      : string_literal '..' string_literal
      .

    block
      : '(' altList ')'
      .

    altList
      : alternative ('|' alternative)*
      .

    terminal
      : string_literal
      .

    ruleIdent
      : ParserIdentifier
      .

    ruleref
      : identifier
      .

    tokenIdent
      : LexerIdentifier
      .

    grammarIdent
      : identifier
      .

    identifier
      : LexerIdentifier
      / ParserIdentifier
      .
@}

@O@<basic.gla@>@{
    doc_comment: C_COMMENT
    LexerIdentifier: $[A-Z][a-zA-Z0-9_]*
    ParserIdentifier: $[a-z][a-zA-Z0-9_]*
    string_literal: $'(.)+'
@}
